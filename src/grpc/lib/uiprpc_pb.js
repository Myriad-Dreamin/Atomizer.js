/* eslint-disable */
// source: uiprpc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var base_pb = require('./base_pb.js');
goog.object.extend(proto, base_pb);
goog.exportSymbol('proto.uiprpc.AttestationReceiveReply', null, global);
goog.exportSymbol('proto.uiprpc.AttestationReceiveRequest', null, global);
goog.exportSymbol('proto.uiprpc.InternalCloseSessionReply', null, global);
goog.exportSymbol('proto.uiprpc.InternalCloseSessionRequest', null, global);
goog.exportSymbol('proto.uiprpc.InternalRequestComingReply', null, global);
goog.exportSymbol('proto.uiprpc.InternalRequestComingRequest', null, global);
goog.exportSymbol('proto.uiprpc.MerkleProofReceiveReply', null, global);
goog.exportSymbol('proto.uiprpc.MerkleProofReceiveRequest', null, global);
goog.exportSymbol('proto.uiprpc.SessionAckForInitReply', null, global);
goog.exportSymbol('proto.uiprpc.SessionAckForInitRequest', null, global);
goog.exportSymbol('proto.uiprpc.SessionRequireRawTransactReply', null, global);
goog.exportSymbol('proto.uiprpc.SessionRequireRawTransactRequest', null, global);
goog.exportSymbol('proto.uiprpc.SessionRequireTransactReply', null, global);
goog.exportSymbol('proto.uiprpc.SessionRequireTransactRequest', null, global);
goog.exportSymbol('proto.uiprpc.SessionStartReply', null, global);
goog.exportSymbol('proto.uiprpc.SessionStartRequest', null, global);
goog.exportSymbol('proto.uiprpc.ShortenMerkleProofReceiveReply', null, global);
goog.exportSymbol('proto.uiprpc.ShortenMerkleProofReceiveRequest', null, global);
goog.exportSymbol('proto.uiprpc.UserRegisterReply', null, global);
goog.exportSymbol('proto.uiprpc.UserRegisterRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.UserRegisterRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.UserRegisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.UserRegisterRequest.displayName = 'proto.uiprpc.UserRegisterRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.UserRegisterReply = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.UserRegisterReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.UserRegisterReply.displayName = 'proto.uiprpc.UserRegisterReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.SessionStartRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.SessionStartRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.SessionStartRequest.displayName = 'proto.uiprpc.SessionStartRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.SessionStartReply = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.SessionStartReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.SessionStartReply.displayName = 'proto.uiprpc.SessionStartReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.SessionAckForInitRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.SessionAckForInitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.SessionAckForInitRequest.displayName = 'proto.uiprpc.SessionAckForInitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.SessionAckForInitReply = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.SessionAckForInitReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.SessionAckForInitReply.displayName = 'proto.uiprpc.SessionAckForInitReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.SessionRequireTransactRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.SessionRequireTransactRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.SessionRequireTransactRequest.displayName = 'proto.uiprpc.SessionRequireTransactRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.SessionRequireTransactReply = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.SessionRequireTransactReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.SessionRequireTransactReply.displayName = 'proto.uiprpc.SessionRequireTransactReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.SessionRequireRawTransactRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.SessionRequireRawTransactRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.SessionRequireRawTransactRequest.displayName = 'proto.uiprpc.SessionRequireRawTransactRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.SessionRequireRawTransactReply = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.SessionRequireRawTransactReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.SessionRequireRawTransactReply.displayName = 'proto.uiprpc.SessionRequireRawTransactReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.AttestationReceiveRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.AttestationReceiveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.AttestationReceiveRequest.displayName = 'proto.uiprpc.AttestationReceiveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.AttestationReceiveReply = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.AttestationReceiveReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.AttestationReceiveReply.displayName = 'proto.uiprpc.AttestationReceiveReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.MerkleProofReceiveRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.MerkleProofReceiveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.MerkleProofReceiveRequest.displayName = 'proto.uiprpc.MerkleProofReceiveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.MerkleProofReceiveReply = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.MerkleProofReceiveReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.MerkleProofReceiveReply.displayName = 'proto.uiprpc.MerkleProofReceiveReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.ShortenMerkleProofReceiveRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.ShortenMerkleProofReceiveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.ShortenMerkleProofReceiveRequest.displayName = 'proto.uiprpc.ShortenMerkleProofReceiveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.ShortenMerkleProofReceiveReply = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.ShortenMerkleProofReceiveReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.ShortenMerkleProofReceiveReply.displayName = 'proto.uiprpc.ShortenMerkleProofReceiveReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.InternalRequestComingRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.uiprpc.InternalRequestComingRequest.repeatedFields_, null);
};
goog.inherits(proto.uiprpc.InternalRequestComingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.InternalRequestComingRequest.displayName = 'proto.uiprpc.InternalRequestComingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.InternalRequestComingReply = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.InternalRequestComingReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.InternalRequestComingReply.displayName = 'proto.uiprpc.InternalRequestComingReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.InternalCloseSessionRequest = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.uiprpc.InternalCloseSessionRequest.repeatedFields_, null);
};
goog.inherits(proto.uiprpc.InternalCloseSessionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.InternalCloseSessionRequest.displayName = 'proto.uiprpc.InternalCloseSessionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.uiprpc.InternalCloseSessionReply = function(opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.uiprpc.InternalCloseSessionReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
   * @public
   * @override
   */
    proto.uiprpc.InternalCloseSessionReply.displayName = 'proto.uiprpc.InternalCloseSessionReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.UserRegisterRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.UserRegisterRequest.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.UserRegisterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.UserRegisterRequest.toObject = function(includeInstance, msg) {
        var f, obj = {
            account: (f = msg.getAccount()) && base_pb.Account.toObject(includeInstance, f),
            userName: jspb.Message.getFieldWithDefault(msg, 2, '')
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.UserRegisterRequest}
 */
proto.uiprpc.UserRegisterRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.UserRegisterRequest;
    return proto.uiprpc.UserRegisterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.UserRegisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.UserRegisterRequest}
 */
proto.uiprpc.UserRegisterRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = new base_pb.Account;
            reader.readMessage(value,base_pb.Account.deserializeBinaryFromReader);
            msg.setAccount(value);
            break;
        case 2:
            var value = /** @type {string} */ (reader.readString());
            msg.setUserName(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.UserRegisterRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.UserRegisterRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.UserRegisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.UserRegisterRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getAccount();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            base_pb.Account.serializeBinaryToWriter
        );
    }
    f = message.getUserName();
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        );
    }
};


/**
 * optional base.Account account = 1;
 * @return {?proto.uiprpc.base.Account}
 */
proto.uiprpc.UserRegisterRequest.prototype.getAccount = function() {
    return /** @type{?proto.uiprpc.base.Account} */ (
        jspb.Message.getWrapperField(this, base_pb.Account, 1));
};


/** @param {?proto.uiprpc.base.Account|undefined} value */
proto.uiprpc.UserRegisterRequest.prototype.setAccount = function(value) {
    jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.uiprpc.UserRegisterRequest.prototype.clearAccount = function() {
    this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uiprpc.UserRegisterRequest.prototype.hasAccount = function() {
    return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user_name = 2;
 * @return {string}
 */
proto.uiprpc.UserRegisterRequest.prototype.getUserName = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};


/** @param {string} value */
proto.uiprpc.UserRegisterRequest.prototype.setUserName = function(value) {
    jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.UserRegisterReply.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.UserRegisterReply.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.UserRegisterReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.UserRegisterReply.toObject = function(includeInstance, msg) {
        var f, obj = {
            ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.UserRegisterReply}
 */
proto.uiprpc.UserRegisterReply.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.UserRegisterReply;
    return proto.uiprpc.UserRegisterReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.UserRegisterReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.UserRegisterReply}
 */
proto.uiprpc.UserRegisterReply.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {boolean} */ (reader.readBool());
            msg.setOk(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.UserRegisterReply.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.UserRegisterReply.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.UserRegisterReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.UserRegisterReply.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getOk();
    if (f) {
        writer.writeBool(
            1,
            f
        );
    }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.uiprpc.UserRegisterReply.prototype.getOk = function() {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.uiprpc.UserRegisterReply.prototype.setOk = function(value) {
    jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.SessionStartRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.SessionStartRequest.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.SessionStartRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.SessionStartRequest.toObject = function(includeInstance, msg) {
        var f, obj = {
            opintents: (f = msg.getOpintents()) && base_pb.OpIntents.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.SessionStartRequest}
 */
proto.uiprpc.SessionStartRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.SessionStartRequest;
    return proto.uiprpc.SessionStartRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.SessionStartRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.SessionStartRequest}
 */
proto.uiprpc.SessionStartRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = new base_pb.OpIntents;
            reader.readMessage(value,base_pb.OpIntents.deserializeBinaryFromReader);
            msg.setOpintents(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.SessionStartRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.SessionStartRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.SessionStartRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.SessionStartRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getOpintents();
    if (f != null) {
        writer.writeMessage(
            1,
            f,
            base_pb.OpIntents.serializeBinaryToWriter
        );
    }
};


/**
 * optional base.OpIntents opintents = 1;
 * @return {?proto.uiprpc.base.OpIntents}
 */
proto.uiprpc.SessionStartRequest.prototype.getOpintents = function() {
    return /** @type{?proto.uiprpc.base.OpIntents} */ (
        jspb.Message.getWrapperField(this, base_pb.OpIntents, 1));
};


/** @param {?proto.uiprpc.base.OpIntents|undefined} value */
proto.uiprpc.SessionStartRequest.prototype.setOpintents = function(value) {
    jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.uiprpc.SessionStartRequest.prototype.clearOpintents = function() {
    this.setOpintents(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uiprpc.SessionStartRequest.prototype.hasOpintents = function() {
    return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.SessionStartReply.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.SessionStartReply.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.SessionStartReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.SessionStartReply.toObject = function(includeInstance, msg) {
        var f, obj = {
            ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
            sessionId: msg.getSessionId_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.SessionStartReply}
 */
proto.uiprpc.SessionStartReply.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.SessionStartReply;
    return proto.uiprpc.SessionStartReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.SessionStartReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.SessionStartReply}
 */
proto.uiprpc.SessionStartReply.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {boolean} */ (reader.readBool());
            msg.setOk(value);
            break;
        case 2:
            var value = /** @type {!Uint8Array} */ (reader.readBytes());
            msg.setSessionId(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.SessionStartReply.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.SessionStartReply.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.SessionStartReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.SessionStartReply.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getOk();
    if (f) {
        writer.writeBool(
            1,
            f
        );
    }
    f = message.getSessionId_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            2,
            f
        );
    }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.uiprpc.SessionStartReply.prototype.getOk = function() {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.uiprpc.SessionStartReply.prototype.setOk = function(value) {
    jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bytes session_id = 2;
 * @return {string}
 */
proto.uiprpc.SessionStartReply.prototype.getSessionId = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};


/**
 * optional bytes session_id = 2;
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {string}
 */
proto.uiprpc.SessionStartReply.prototype.getSessionId_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getSessionId()));
};


/**
 * optional bytes session_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {!Uint8Array}
 */
proto.uiprpc.SessionStartReply.prototype.getSessionId_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getSessionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.uiprpc.SessionStartReply.prototype.setSessionId = function(value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.SessionAckForInitRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.SessionAckForInitRequest.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.SessionAckForInitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.SessionAckForInitRequest.toObject = function(includeInstance, msg) {
        var f, obj = {
            sessionId: msg.getSessionId_asB64(),
            user: (f = msg.getUser()) && base_pb.Account.toObject(includeInstance, f),
            userSignature: (f = msg.getUserSignature()) && base_pb.Signature.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.SessionAckForInitRequest}
 */
proto.uiprpc.SessionAckForInitRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.SessionAckForInitRequest;
    return proto.uiprpc.SessionAckForInitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.SessionAckForInitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.SessionAckForInitRequest}
 */
proto.uiprpc.SessionAckForInitRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {!Uint8Array} */ (reader.readBytes());
            msg.setSessionId(value);
            break;
        case 2:
            var value = new base_pb.Account;
            reader.readMessage(value,base_pb.Account.deserializeBinaryFromReader);
            msg.setUser(value);
            break;
        case 3:
            var value = new base_pb.Signature;
            reader.readMessage(value,base_pb.Signature.deserializeBinaryFromReader);
            msg.setUserSignature(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.SessionAckForInitRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.SessionAckForInitRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.SessionAckForInitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.SessionAckForInitRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSessionId_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            1,
            f
        );
    }
    f = message.getUser();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            base_pb.Account.serializeBinaryToWriter
        );
    }
    f = message.getUserSignature();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            base_pb.Signature.serializeBinaryToWriter
        );
    }
};


/**
 * optional bytes session_id = 1;
 * @return {string}
 */
proto.uiprpc.SessionAckForInitRequest.prototype.getSessionId = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};


/**
 * optional bytes session_id = 1;
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {string}
 */
proto.uiprpc.SessionAckForInitRequest.prototype.getSessionId_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getSessionId()));
};


/**
 * optional bytes session_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {!Uint8Array}
 */
proto.uiprpc.SessionAckForInitRequest.prototype.getSessionId_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getSessionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.uiprpc.SessionAckForInitRequest.prototype.setSessionId = function(value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional base.Account user = 2;
 * @return {?proto.uiprpc.base.Account}
 */
proto.uiprpc.SessionAckForInitRequest.prototype.getUser = function() {
    return /** @type{?proto.uiprpc.base.Account} */ (
        jspb.Message.getWrapperField(this, base_pb.Account, 2));
};


/** @param {?proto.uiprpc.base.Account|undefined} value */
proto.uiprpc.SessionAckForInitRequest.prototype.setUser = function(value) {
    jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.uiprpc.SessionAckForInitRequest.prototype.clearUser = function() {
    this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uiprpc.SessionAckForInitRequest.prototype.hasUser = function() {
    return jspb.Message.getField(this, 2) != null;
};


/**
 * optional base.Signature user_signature = 3;
 * @return {?proto.uiprpc.base.Signature}
 */
proto.uiprpc.SessionAckForInitRequest.prototype.getUserSignature = function() {
    return /** @type{?proto.uiprpc.base.Signature} */ (
        jspb.Message.getWrapperField(this, base_pb.Signature, 3));
};


/** @param {?proto.uiprpc.base.Signature|undefined} value */
proto.uiprpc.SessionAckForInitRequest.prototype.setUserSignature = function(value) {
    jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.uiprpc.SessionAckForInitRequest.prototype.clearUserSignature = function() {
    this.setUserSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uiprpc.SessionAckForInitRequest.prototype.hasUserSignature = function() {
    return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.SessionAckForInitReply.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.SessionAckForInitReply.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.SessionAckForInitReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.SessionAckForInitReply.toObject = function(includeInstance, msg) {
        var f, obj = {
            ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.SessionAckForInitReply}
 */
proto.uiprpc.SessionAckForInitReply.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.SessionAckForInitReply;
    return proto.uiprpc.SessionAckForInitReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.SessionAckForInitReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.SessionAckForInitReply}
 */
proto.uiprpc.SessionAckForInitReply.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {boolean} */ (reader.readBool());
            msg.setOk(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.SessionAckForInitReply.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.SessionAckForInitReply.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.SessionAckForInitReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.SessionAckForInitReply.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getOk();
    if (f) {
        writer.writeBool(
            1,
            f
        );
    }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.uiprpc.SessionAckForInitReply.prototype.getOk = function() {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.uiprpc.SessionAckForInitReply.prototype.setOk = function(value) {
    jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.SessionRequireTransactRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.SessionRequireTransactRequest.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.SessionRequireTransactRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.SessionRequireTransactRequest.toObject = function(includeInstance, msg) {
        var f, obj = {
            sessionId: msg.getSessionId_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.SessionRequireTransactRequest}
 */
proto.uiprpc.SessionRequireTransactRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.SessionRequireTransactRequest;
    return proto.uiprpc.SessionRequireTransactRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.SessionRequireTransactRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.SessionRequireTransactRequest}
 */
proto.uiprpc.SessionRequireTransactRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {!Uint8Array} */ (reader.readBytes());
            msg.setSessionId(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.SessionRequireTransactRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.SessionRequireTransactRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.SessionRequireTransactRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.SessionRequireTransactRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSessionId_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            1,
            f
        );
    }
};


/**
 * optional bytes session_id = 1;
 * @return {string}
 */
proto.uiprpc.SessionRequireTransactRequest.prototype.getSessionId = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};


/**
 * optional bytes session_id = 1;
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {string}
 */
proto.uiprpc.SessionRequireTransactRequest.prototype.getSessionId_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getSessionId()));
};


/**
 * optional bytes session_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {!Uint8Array}
 */
proto.uiprpc.SessionRequireTransactRequest.prototype.getSessionId_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getSessionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.uiprpc.SessionRequireTransactRequest.prototype.setSessionId = function(value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.SessionRequireTransactReply.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.SessionRequireTransactReply.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.SessionRequireTransactReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.SessionRequireTransactReply.toObject = function(includeInstance, msg) {
        var f, obj = {
            tx: (f = msg.getTx()) && base_pb.Transaction.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.SessionRequireTransactReply}
 */
proto.uiprpc.SessionRequireTransactReply.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.SessionRequireTransactReply;
    return proto.uiprpc.SessionRequireTransactReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.SessionRequireTransactReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.SessionRequireTransactReply}
 */
proto.uiprpc.SessionRequireTransactReply.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 2:
            var value = new base_pb.Transaction;
            reader.readMessage(value,base_pb.Transaction.deserializeBinaryFromReader);
            msg.setTx(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.SessionRequireTransactReply.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.SessionRequireTransactReply.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.SessionRequireTransactReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.SessionRequireTransactReply.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getTx();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            base_pb.Transaction.serializeBinaryToWriter
        );
    }
};


/**
 * optional base.Transaction tx = 2;
 * @return {?proto.uiprpc.base.Transaction}
 */
proto.uiprpc.SessionRequireTransactReply.prototype.getTx = function() {
    return /** @type{?proto.uiprpc.base.Transaction} */ (
        jspb.Message.getWrapperField(this, base_pb.Transaction, 2));
};


/** @param {?proto.uiprpc.base.Transaction|undefined} value */
proto.uiprpc.SessionRequireTransactReply.prototype.setTx = function(value) {
    jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.uiprpc.SessionRequireTransactReply.prototype.clearTx = function() {
    this.setTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uiprpc.SessionRequireTransactReply.prototype.hasTx = function() {
    return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.SessionRequireRawTransactRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.SessionRequireRawTransactRequest.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.SessionRequireRawTransactRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.SessionRequireRawTransactRequest.toObject = function(includeInstance, msg) {
        var f, obj = {
            sessionId: msg.getSessionId_asB64()
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.SessionRequireRawTransactRequest}
 */
proto.uiprpc.SessionRequireRawTransactRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.SessionRequireRawTransactRequest;
    return proto.uiprpc.SessionRequireRawTransactRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.SessionRequireRawTransactRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.SessionRequireRawTransactRequest}
 */
proto.uiprpc.SessionRequireRawTransactRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {!Uint8Array} */ (reader.readBytes());
            msg.setSessionId(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.SessionRequireRawTransactRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.SessionRequireRawTransactRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.SessionRequireRawTransactRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.SessionRequireRawTransactRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSessionId_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            1,
            f
        );
    }
};


/**
 * optional bytes session_id = 1;
 * @return {string}
 */
proto.uiprpc.SessionRequireRawTransactRequest.prototype.getSessionId = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};


/**
 * optional bytes session_id = 1;
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {string}
 */
proto.uiprpc.SessionRequireRawTransactRequest.prototype.getSessionId_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getSessionId()));
};


/**
 * optional bytes session_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {!Uint8Array}
 */
proto.uiprpc.SessionRequireRawTransactRequest.prototype.getSessionId_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getSessionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.uiprpc.SessionRequireRawTransactRequest.prototype.setSessionId = function(value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.SessionRequireRawTransactReply.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.SessionRequireRawTransactReply.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.SessionRequireRawTransactReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.SessionRequireRawTransactReply.toObject = function(includeInstance, msg) {
        var f, obj = {
            rawTransaction: msg.getRawTransaction_asB64(),
            tid: jspb.Message.getFieldWithDefault(msg, 2, 0),
            src: (f = msg.getSrc()) && base_pb.Account.toObject(includeInstance, f),
            dst: (f = msg.getDst()) && base_pb.Account.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.SessionRequireRawTransactReply}
 */
proto.uiprpc.SessionRequireRawTransactReply.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.SessionRequireRawTransactReply;
    return proto.uiprpc.SessionRequireRawTransactReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.SessionRequireRawTransactReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.SessionRequireRawTransactReply}
 */
proto.uiprpc.SessionRequireRawTransactReply.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {!Uint8Array} */ (reader.readBytes());
            msg.setRawTransaction(value);
            break;
        case 2:
            var value = /** @type {number} */ (reader.readUint64());
            msg.setTid(value);
            break;
        case 3:
            var value = new base_pb.Account;
            reader.readMessage(value,base_pb.Account.deserializeBinaryFromReader);
            msg.setSrc(value);
            break;
        case 4:
            var value = new base_pb.Account;
            reader.readMessage(value,base_pb.Account.deserializeBinaryFromReader);
            msg.setDst(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.SessionRequireRawTransactReply.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.SessionRequireRawTransactReply.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.SessionRequireRawTransactReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.SessionRequireRawTransactReply.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getRawTransaction_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            1,
            f
        );
    }
    f = message.getTid();
    if (f !== 0) {
        writer.writeUint64(
            2,
            f
        );
    }
    f = message.getSrc();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            base_pb.Account.serializeBinaryToWriter
        );
    }
    f = message.getDst();
    if (f != null) {
        writer.writeMessage(
            4,
            f,
            base_pb.Account.serializeBinaryToWriter
        );
    }
};


/**
 * optional bytes raw_transaction = 1;
 * @return {string}
 */
proto.uiprpc.SessionRequireRawTransactReply.prototype.getRawTransaction = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};


/**
 * optional bytes raw_transaction = 1;
 * This is a type-conversion wrapper around `getRawTransaction()`
 * @return {string}
 */
proto.uiprpc.SessionRequireRawTransactReply.prototype.getRawTransaction_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getRawTransaction()));
};


/**
 * optional bytes raw_transaction = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawTransaction()`
 * @return {!Uint8Array}
 */
proto.uiprpc.SessionRequireRawTransactReply.prototype.getRawTransaction_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getRawTransaction()));
};


/** @param {!(string|Uint8Array)} value */
proto.uiprpc.SessionRequireRawTransactReply.prototype.setRawTransaction = function(value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 tid = 2;
 * @return {number}
 */
proto.uiprpc.SessionRequireRawTransactReply.prototype.getTid = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.uiprpc.SessionRequireRawTransactReply.prototype.setTid = function(value) {
    jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional base.Account src = 3;
 * @return {?proto.uiprpc.base.Account}
 */
proto.uiprpc.SessionRequireRawTransactReply.prototype.getSrc = function() {
    return /** @type{?proto.uiprpc.base.Account} */ (
        jspb.Message.getWrapperField(this, base_pb.Account, 3));
};


/** @param {?proto.uiprpc.base.Account|undefined} value */
proto.uiprpc.SessionRequireRawTransactReply.prototype.setSrc = function(value) {
    jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.uiprpc.SessionRequireRawTransactReply.prototype.clearSrc = function() {
    this.setSrc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uiprpc.SessionRequireRawTransactReply.prototype.hasSrc = function() {
    return jspb.Message.getField(this, 3) != null;
};


/**
 * optional base.Account dst = 4;
 * @return {?proto.uiprpc.base.Account}
 */
proto.uiprpc.SessionRequireRawTransactReply.prototype.getDst = function() {
    return /** @type{?proto.uiprpc.base.Account} */ (
        jspb.Message.getWrapperField(this, base_pb.Account, 4));
};


/** @param {?proto.uiprpc.base.Account|undefined} value */
proto.uiprpc.SessionRequireRawTransactReply.prototype.setDst = function(value) {
    jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.uiprpc.SessionRequireRawTransactReply.prototype.clearDst = function() {
    this.setDst(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uiprpc.SessionRequireRawTransactReply.prototype.hasDst = function() {
    return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.AttestationReceiveRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.AttestationReceiveRequest.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.AttestationReceiveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.AttestationReceiveRequest.toObject = function(includeInstance, msg) {
        var f, obj = {
            sessionId: msg.getSessionId_asB64(),
            atte: (f = msg.getAtte()) && base_pb.Attestation.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.AttestationReceiveRequest}
 */
proto.uiprpc.AttestationReceiveRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.AttestationReceiveRequest;
    return proto.uiprpc.AttestationReceiveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.AttestationReceiveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.AttestationReceiveRequest}
 */
proto.uiprpc.AttestationReceiveRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {!Uint8Array} */ (reader.readBytes());
            msg.setSessionId(value);
            break;
        case 2:
            var value = new base_pb.Attestation;
            reader.readMessage(value,base_pb.Attestation.deserializeBinaryFromReader);
            msg.setAtte(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.AttestationReceiveRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.AttestationReceiveRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.AttestationReceiveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.AttestationReceiveRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSessionId_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            1,
            f
        );
    }
    f = message.getAtte();
    if (f != null) {
        writer.writeMessage(
            2,
            f,
            base_pb.Attestation.serializeBinaryToWriter
        );
    }
};


/**
 * optional bytes session_id = 1;
 * @return {string}
 */
proto.uiprpc.AttestationReceiveRequest.prototype.getSessionId = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};


/**
 * optional bytes session_id = 1;
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {string}
 */
proto.uiprpc.AttestationReceiveRequest.prototype.getSessionId_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getSessionId()));
};


/**
 * optional bytes session_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {!Uint8Array}
 */
proto.uiprpc.AttestationReceiveRequest.prototype.getSessionId_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getSessionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.uiprpc.AttestationReceiveRequest.prototype.setSessionId = function(value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional base.Attestation atte = 2;
 * @return {?proto.uiprpc.base.Attestation}
 */
proto.uiprpc.AttestationReceiveRequest.prototype.getAtte = function() {
    return /** @type{?proto.uiprpc.base.Attestation} */ (
        jspb.Message.getWrapperField(this, base_pb.Attestation, 2));
};


/** @param {?proto.uiprpc.base.Attestation|undefined} value */
proto.uiprpc.AttestationReceiveRequest.prototype.setAtte = function(value) {
    jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.uiprpc.AttestationReceiveRequest.prototype.clearAtte = function() {
    this.setAtte(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uiprpc.AttestationReceiveRequest.prototype.hasAtte = function() {
    return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.AttestationReceiveReply.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.AttestationReceiveReply.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.AttestationReceiveReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.AttestationReceiveReply.toObject = function(includeInstance, msg) {
        var f, obj = {
            ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.AttestationReceiveReply}
 */
proto.uiprpc.AttestationReceiveReply.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.AttestationReceiveReply;
    return proto.uiprpc.AttestationReceiveReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.AttestationReceiveReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.AttestationReceiveReply}
 */
proto.uiprpc.AttestationReceiveReply.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {boolean} */ (reader.readBool());
            msg.setOk(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.AttestationReceiveReply.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.AttestationReceiveReply.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.AttestationReceiveReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.AttestationReceiveReply.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getOk();
    if (f) {
        writer.writeBool(
            1,
            f
        );
    }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.uiprpc.AttestationReceiveReply.prototype.getOk = function() {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.uiprpc.AttestationReceiveReply.prototype.setOk = function(value) {
    jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.MerkleProofReceiveRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.MerkleProofReceiveRequest.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.MerkleProofReceiveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.MerkleProofReceiveRequest.toObject = function(includeInstance, msg) {
        var f, obj = {
            sessionId: msg.getSessionId_asB64(),
            chainId: jspb.Message.getFieldWithDefault(msg, 2, 0),
            merkleproof: (f = msg.getMerkleproof()) && base_pb.MerkleProof.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.MerkleProofReceiveRequest}
 */
proto.uiprpc.MerkleProofReceiveRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.MerkleProofReceiveRequest;
    return proto.uiprpc.MerkleProofReceiveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.MerkleProofReceiveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.MerkleProofReceiveRequest}
 */
proto.uiprpc.MerkleProofReceiveRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {!Uint8Array} */ (reader.readBytes());
            msg.setSessionId(value);
            break;
        case 2:
            var value = /** @type {number} */ (reader.readUint64());
            msg.setChainId(value);
            break;
        case 3:
            var value = new base_pb.MerkleProof;
            reader.readMessage(value,base_pb.MerkleProof.deserializeBinaryFromReader);
            msg.setMerkleproof(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.MerkleProofReceiveRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.MerkleProofReceiveRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.MerkleProofReceiveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.MerkleProofReceiveRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSessionId_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            1,
            f
        );
    }
    f = message.getChainId();
    if (f !== 0) {
        writer.writeUint64(
            2,
            f
        );
    }
    f = message.getMerkleproof();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            base_pb.MerkleProof.serializeBinaryToWriter
        );
    }
};


/**
 * optional bytes session_id = 1;
 * @return {string}
 */
proto.uiprpc.MerkleProofReceiveRequest.prototype.getSessionId = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};


/**
 * optional bytes session_id = 1;
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {string}
 */
proto.uiprpc.MerkleProofReceiveRequest.prototype.getSessionId_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getSessionId()));
};


/**
 * optional bytes session_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {!Uint8Array}
 */
proto.uiprpc.MerkleProofReceiveRequest.prototype.getSessionId_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getSessionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.uiprpc.MerkleProofReceiveRequest.prototype.setSessionId = function(value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 chain_id = 2;
 * @return {number}
 */
proto.uiprpc.MerkleProofReceiveRequest.prototype.getChainId = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.uiprpc.MerkleProofReceiveRequest.prototype.setChainId = function(value) {
    jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional base.MerkleProof merkleproof = 3;
 * @return {?proto.uiprpc.base.MerkleProof}
 */
proto.uiprpc.MerkleProofReceiveRequest.prototype.getMerkleproof = function() {
    return /** @type{?proto.uiprpc.base.MerkleProof} */ (
        jspb.Message.getWrapperField(this, base_pb.MerkleProof, 3));
};


/** @param {?proto.uiprpc.base.MerkleProof|undefined} value */
proto.uiprpc.MerkleProofReceiveRequest.prototype.setMerkleproof = function(value) {
    jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.uiprpc.MerkleProofReceiveRequest.prototype.clearMerkleproof = function() {
    this.setMerkleproof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uiprpc.MerkleProofReceiveRequest.prototype.hasMerkleproof = function() {
    return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.MerkleProofReceiveReply.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.MerkleProofReceiveReply.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.MerkleProofReceiveReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.MerkleProofReceiveReply.toObject = function(includeInstance, msg) {
        var f, obj = {
            ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.MerkleProofReceiveReply}
 */
proto.uiprpc.MerkleProofReceiveReply.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.MerkleProofReceiveReply;
    return proto.uiprpc.MerkleProofReceiveReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.MerkleProofReceiveReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.MerkleProofReceiveReply}
 */
proto.uiprpc.MerkleProofReceiveReply.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {boolean} */ (reader.readBool());
            msg.setOk(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.MerkleProofReceiveReply.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.MerkleProofReceiveReply.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.MerkleProofReceiveReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.MerkleProofReceiveReply.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getOk();
    if (f) {
        writer.writeBool(
            1,
            f
        );
    }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.uiprpc.MerkleProofReceiveReply.prototype.getOk = function() {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.uiprpc.MerkleProofReceiveReply.prototype.setOk = function(value) {
    jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.ShortenMerkleProofReceiveRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.ShortenMerkleProofReceiveRequest.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.ShortenMerkleProofReceiveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.ShortenMerkleProofReceiveRequest.toObject = function(includeInstance, msg) {
        var f, obj = {
            sessionId: msg.getSessionId_asB64(),
            chainId: jspb.Message.getFieldWithDefault(msg, 2, 0),
            merkleproof: (f = msg.getMerkleproof()) && base_pb.ShortenMerkleProof.toObject(includeInstance, f)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.ShortenMerkleProofReceiveRequest}
 */
proto.uiprpc.ShortenMerkleProofReceiveRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.ShortenMerkleProofReceiveRequest;
    return proto.uiprpc.ShortenMerkleProofReceiveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.ShortenMerkleProofReceiveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.ShortenMerkleProofReceiveRequest}
 */
proto.uiprpc.ShortenMerkleProofReceiveRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {!Uint8Array} */ (reader.readBytes());
            msg.setSessionId(value);
            break;
        case 2:
            var value = /** @type {number} */ (reader.readUint64());
            msg.setChainId(value);
            break;
        case 3:
            var value = new base_pb.ShortenMerkleProof;
            reader.readMessage(value,base_pb.ShortenMerkleProof.deserializeBinaryFromReader);
            msg.setMerkleproof(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.ShortenMerkleProofReceiveRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.ShortenMerkleProofReceiveRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.ShortenMerkleProofReceiveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.ShortenMerkleProofReceiveRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSessionId_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            1,
            f
        );
    }
    f = message.getChainId();
    if (f !== 0) {
        writer.writeUint64(
            2,
            f
        );
    }
    f = message.getMerkleproof();
    if (f != null) {
        writer.writeMessage(
            3,
            f,
            base_pb.ShortenMerkleProof.serializeBinaryToWriter
        );
    }
};


/**
 * optional bytes session_id = 1;
 * @return {string}
 */
proto.uiprpc.ShortenMerkleProofReceiveRequest.prototype.getSessionId = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};


/**
 * optional bytes session_id = 1;
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {string}
 */
proto.uiprpc.ShortenMerkleProofReceiveRequest.prototype.getSessionId_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getSessionId()));
};


/**
 * optional bytes session_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {!Uint8Array}
 */
proto.uiprpc.ShortenMerkleProofReceiveRequest.prototype.getSessionId_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getSessionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.uiprpc.ShortenMerkleProofReceiveRequest.prototype.setSessionId = function(value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 chain_id = 2;
 * @return {number}
 */
proto.uiprpc.ShortenMerkleProofReceiveRequest.prototype.getChainId = function() {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.uiprpc.ShortenMerkleProofReceiveRequest.prototype.setChainId = function(value) {
    jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional base.ShortenMerkleProof merkleproof = 3;
 * @return {?proto.uiprpc.base.ShortenMerkleProof}
 */
proto.uiprpc.ShortenMerkleProofReceiveRequest.prototype.getMerkleproof = function() {
    return /** @type{?proto.uiprpc.base.ShortenMerkleProof} */ (
        jspb.Message.getWrapperField(this, base_pb.ShortenMerkleProof, 3));
};


/** @param {?proto.uiprpc.base.ShortenMerkleProof|undefined} value */
proto.uiprpc.ShortenMerkleProofReceiveRequest.prototype.setMerkleproof = function(value) {
    jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.uiprpc.ShortenMerkleProofReceiveRequest.prototype.clearMerkleproof = function() {
    this.setMerkleproof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.uiprpc.ShortenMerkleProofReceiveRequest.prototype.hasMerkleproof = function() {
    return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.ShortenMerkleProofReceiveReply.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.ShortenMerkleProofReceiveReply.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.ShortenMerkleProofReceiveReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.ShortenMerkleProofReceiveReply.toObject = function(includeInstance, msg) {
        var f, obj = {
            ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.ShortenMerkleProofReceiveReply}
 */
proto.uiprpc.ShortenMerkleProofReceiveReply.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.ShortenMerkleProofReceiveReply;
    return proto.uiprpc.ShortenMerkleProofReceiveReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.ShortenMerkleProofReceiveReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.ShortenMerkleProofReceiveReply}
 */
proto.uiprpc.ShortenMerkleProofReceiveReply.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {boolean} */ (reader.readBool());
            msg.setOk(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.ShortenMerkleProofReceiveReply.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.ShortenMerkleProofReceiveReply.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.ShortenMerkleProofReceiveReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.ShortenMerkleProofReceiveReply.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getOk();
    if (f) {
        writer.writeBool(
            1,
            f
        );
    }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.uiprpc.ShortenMerkleProofReceiveReply.prototype.getOk = function() {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.uiprpc.ShortenMerkleProofReceiveReply.prototype.setOk = function(value) {
    jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.uiprpc.InternalRequestComingRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.InternalRequestComingRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.InternalRequestComingRequest.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.InternalRequestComingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.InternalRequestComingRequest.toObject = function(includeInstance, msg) {
        var f, obj = {
            sessionId: msg.getSessionId_asB64(),
            host: msg.getHost_asB64(),
            accountsList: jspb.Message.toObjectList(msg.getAccountsList(),
                base_pb.Account.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.InternalRequestComingRequest}
 */
proto.uiprpc.InternalRequestComingRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.InternalRequestComingRequest;
    return proto.uiprpc.InternalRequestComingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.InternalRequestComingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.InternalRequestComingRequest}
 */
proto.uiprpc.InternalRequestComingRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {!Uint8Array} */ (reader.readBytes());
            msg.setSessionId(value);
            break;
        case 2:
            var value = /** @type {!Uint8Array} */ (reader.readBytes());
            msg.setHost(value);
            break;
        case 3:
            var value = new base_pb.Account;
            reader.readMessage(value,base_pb.Account.deserializeBinaryFromReader);
            msg.addAccounts(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.InternalRequestComingRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.InternalRequestComingRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.InternalRequestComingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.InternalRequestComingRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSessionId_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            1,
            f
        );
    }
    f = message.getHost_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            2,
            f
        );
    }
    f = message.getAccountsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            3,
            f,
            base_pb.Account.serializeBinaryToWriter
        );
    }
};


/**
 * optional bytes session_id = 1;
 * @return {string}
 */
proto.uiprpc.InternalRequestComingRequest.prototype.getSessionId = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};


/**
 * optional bytes session_id = 1;
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {string}
 */
proto.uiprpc.InternalRequestComingRequest.prototype.getSessionId_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getSessionId()));
};


/**
 * optional bytes session_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {!Uint8Array}
 */
proto.uiprpc.InternalRequestComingRequest.prototype.getSessionId_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getSessionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.uiprpc.InternalRequestComingRequest.prototype.setSessionId = function(value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes host = 2;
 * @return {string}
 */
proto.uiprpc.InternalRequestComingRequest.prototype.getHost = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};


/**
 * optional bytes host = 2;
 * This is a type-conversion wrapper around `getHost()`
 * @return {string}
 */
proto.uiprpc.InternalRequestComingRequest.prototype.getHost_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getHost()));
};


/**
 * optional bytes host = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHost()`
 * @return {!Uint8Array}
 */
proto.uiprpc.InternalRequestComingRequest.prototype.getHost_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getHost()));
};


/** @param {!(string|Uint8Array)} value */
proto.uiprpc.InternalRequestComingRequest.prototype.setHost = function(value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated base.Account accounts = 3;
 * @return {!Array<!proto.uiprpc.base.Account>}
 */
proto.uiprpc.InternalRequestComingRequest.prototype.getAccountsList = function() {
    return /** @type{!Array<!proto.uiprpc.base.Account>} */ (
        jspb.Message.getRepeatedWrapperField(this, base_pb.Account, 3));
};


/** @param {!Array<!proto.uiprpc.base.Account>} value */
proto.uiprpc.InternalRequestComingRequest.prototype.setAccountsList = function(value) {
    jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.uiprpc.base.Account=} opt_value
 * @param {number=} opt_index
 * @return {!proto.uiprpc.base.Account}
 */
proto.uiprpc.InternalRequestComingRequest.prototype.addAccounts = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.uiprpc.base.Account, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.uiprpc.InternalRequestComingRequest.prototype.clearAccountsList = function() {
    this.setAccountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.InternalRequestComingReply.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.InternalRequestComingReply.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.InternalRequestComingReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.InternalRequestComingReply.toObject = function(includeInstance, msg) {
        var f, obj = {
            ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.InternalRequestComingReply}
 */
proto.uiprpc.InternalRequestComingReply.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.InternalRequestComingReply;
    return proto.uiprpc.InternalRequestComingReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.InternalRequestComingReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.InternalRequestComingReply}
 */
proto.uiprpc.InternalRequestComingReply.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {boolean} */ (reader.readBool());
            msg.setOk(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.InternalRequestComingReply.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.InternalRequestComingReply.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.InternalRequestComingReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.InternalRequestComingReply.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getOk();
    if (f) {
        writer.writeBool(
            1,
            f
        );
    }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.uiprpc.InternalRequestComingReply.prototype.getOk = function() {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.uiprpc.InternalRequestComingReply.prototype.setOk = function(value) {
    jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.uiprpc.InternalCloseSessionRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.InternalCloseSessionRequest.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.InternalCloseSessionRequest.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.InternalCloseSessionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.InternalCloseSessionRequest.toObject = function(includeInstance, msg) {
        var f, obj = {
            sessionId: msg.getSessionId_asB64(),
            nsbHost: msg.getNsbHost_asB64(),
            grpcHost: msg.getGrpcHost_asB64(),
            accountsList: jspb.Message.toObjectList(msg.getAccountsList(),
                base_pb.Account.toObject, includeInstance)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.InternalCloseSessionRequest}
 */
proto.uiprpc.InternalCloseSessionRequest.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.InternalCloseSessionRequest;
    return proto.uiprpc.InternalCloseSessionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.InternalCloseSessionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.InternalCloseSessionRequest}
 */
proto.uiprpc.InternalCloseSessionRequest.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {!Uint8Array} */ (reader.readBytes());
            msg.setSessionId(value);
            break;
        case 2:
            var value = /** @type {!Uint8Array} */ (reader.readBytes());
            msg.setNsbHost(value);
            break;
        case 3:
            var value = /** @type {!Uint8Array} */ (reader.readBytes());
            msg.setGrpcHost(value);
            break;
        case 4:
            var value = new base_pb.Account;
            reader.readMessage(value,base_pb.Account.deserializeBinaryFromReader);
            msg.addAccounts(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.InternalCloseSessionRequest.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.InternalCloseSessionRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.InternalCloseSessionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.InternalCloseSessionRequest.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getSessionId_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            1,
            f
        );
    }
    f = message.getNsbHost_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            2,
            f
        );
    }
    f = message.getGrpcHost_asU8();
    if (f.length > 0) {
        writer.writeBytes(
            3,
            f
        );
    }
    f = message.getAccountsList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(
            4,
            f,
            base_pb.Account.serializeBinaryToWriter
        );
    }
};


/**
 * optional bytes session_id = 1;
 * @return {string}
 */
proto.uiprpc.InternalCloseSessionRequest.prototype.getSessionId = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};


/**
 * optional bytes session_id = 1;
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {string}
 */
proto.uiprpc.InternalCloseSessionRequest.prototype.getSessionId_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getSessionId()));
};


/**
 * optional bytes session_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {!Uint8Array}
 */
proto.uiprpc.InternalCloseSessionRequest.prototype.getSessionId_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getSessionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.uiprpc.InternalCloseSessionRequest.prototype.setSessionId = function(value) {
    jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes nsb_host = 2;
 * @return {string}
 */
proto.uiprpc.InternalCloseSessionRequest.prototype.getNsbHost = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};


/**
 * optional bytes nsb_host = 2;
 * This is a type-conversion wrapper around `getNsbHost()`
 * @return {string}
 */
proto.uiprpc.InternalCloseSessionRequest.prototype.getNsbHost_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getNsbHost()));
};


/**
 * optional bytes nsb_host = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNsbHost()`
 * @return {!Uint8Array}
 */
proto.uiprpc.InternalCloseSessionRequest.prototype.getNsbHost_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getNsbHost()));
};


/** @param {!(string|Uint8Array)} value */
proto.uiprpc.InternalCloseSessionRequest.prototype.setNsbHost = function(value) {
    jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes grpc_host = 3;
 * @return {string}
 */
proto.uiprpc.InternalCloseSessionRequest.prototype.getGrpcHost = function() {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};


/**
 * optional bytes grpc_host = 3;
 * This is a type-conversion wrapper around `getGrpcHost()`
 * @return {string}
 */
proto.uiprpc.InternalCloseSessionRequest.prototype.getGrpcHost_asB64 = function() {
    return /** @type {string} */ (jspb.Message.bytesAsB64(
        this.getGrpcHost()));
};


/**
 * optional bytes grpc_host = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGrpcHost()`
 * @return {!Uint8Array}
 */
proto.uiprpc.InternalCloseSessionRequest.prototype.getGrpcHost_asU8 = function() {
    return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
        this.getGrpcHost()));
};


/** @param {!(string|Uint8Array)} value */
proto.uiprpc.InternalCloseSessionRequest.prototype.setGrpcHost = function(value) {
    jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated base.Account accounts = 4;
 * @return {!Array<!proto.uiprpc.base.Account>}
 */
proto.uiprpc.InternalCloseSessionRequest.prototype.getAccountsList = function() {
    return /** @type{!Array<!proto.uiprpc.base.Account>} */ (
        jspb.Message.getRepeatedWrapperField(this, base_pb.Account, 4));
};


/** @param {!Array<!proto.uiprpc.base.Account>} value */
proto.uiprpc.InternalCloseSessionRequest.prototype.setAccountsList = function(value) {
    jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.uiprpc.base.Account=} opt_value
 * @param {number=} opt_index
 * @return {!proto.uiprpc.base.Account}
 */
proto.uiprpc.InternalCloseSessionRequest.prototype.addAccounts = function(opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.uiprpc.base.Account, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.uiprpc.InternalCloseSessionRequest.prototype.clearAccountsList = function() {
    this.setAccountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
    proto.uiprpc.InternalCloseSessionReply.prototype.toObject = function(opt_includeInstance) {
        return proto.uiprpc.InternalCloseSessionReply.toObject(opt_includeInstance, this);
    };


    /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.uiprpc.InternalCloseSessionReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
    proto.uiprpc.InternalCloseSessionReply.toObject = function(includeInstance, msg) {
        var f, obj = {
            ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
        };

        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.uiprpc.InternalCloseSessionReply}
 */
proto.uiprpc.InternalCloseSessionReply.deserializeBinary = function(bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.uiprpc.InternalCloseSessionReply;
    return proto.uiprpc.InternalCloseSessionReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.uiprpc.InternalCloseSessionReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.uiprpc.InternalCloseSessionReply}
 */
proto.uiprpc.InternalCloseSessionReply.deserializeBinaryFromReader = function(msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
        case 1:
            var value = /** @type {boolean} */ (reader.readBool());
            msg.setOk(value);
            break;
        default:
            reader.skipField();
            break;
        }
    }
    return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.uiprpc.InternalCloseSessionReply.prototype.serializeBinary = function() {
    var writer = new jspb.BinaryWriter();
    proto.uiprpc.InternalCloseSessionReply.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.uiprpc.InternalCloseSessionReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.uiprpc.InternalCloseSessionReply.serializeBinaryToWriter = function(message, writer) {
    var f = undefined;
    f = message.getOk();
    if (f) {
        writer.writeBool(
            1,
            f
        );
    }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.uiprpc.InternalCloseSessionReply.prototype.getOk = function() {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.uiprpc.InternalCloseSessionReply.prototype.setOk = function(value) {
    jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.uiprpc);
